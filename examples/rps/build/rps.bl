#lang reach/bl

(define-contract 
  [1 (#:join 0/A:address) (between [  ] [  ]) 0 () (5/Declassify:uint256 6/Declassify:uint256) 
    (define 9/PrimApp:uint256 (TXN_VALUE))
    (define 10/PrimApp:uint256 (ADD 5/Declassify:uint256 6/Declassify:uint256))
    (define 11/PrimApp:bool (PEQ 9/PrimApp:uint256 10/PrimApp:uint256))
    (require! 11/PrimApp:bool)
    (wait! 1 (0/A:address 5/Declassify:uint256 6/Declassify:uint256))]
  [2 (#:join 3/B:address) (between [  ] [ 10 ]) 1 (0/A:address 5/Declassify:uint256 6/Declassify:uint256) () 
    (define 13/PrimApp:uint256 (TXN_VALUE))
    (define 14/PrimApp:bool (PEQ 13/PrimApp:uint256 5/Declassify:uint256))
    (require! 14/PrimApp:bool)
    (wait! 2 (0/A:address 3/B:address 5/Declassify:uint256 6/Declassify:uint256))]
  [3 (#:from 0/A:address) (between [  ] [ 10 ]) 2 (0/A:address 3/B:address 5/Declassify:uint256 6/Declassify:uint256) (28/Declassify:uint256) 
    (define 30/PrimApp:uint256 (TXN_VALUE))
    (define 31/PrimApp:bool (PEQ 30/PrimApp:uint256 0))
    (require! 31/PrimApp:bool)
    (wait! 3 (0/A:address 3/B:address 5/Declassify:uint256 6/Declassify:uint256 28/Declassify:uint256))]
  [4 (#:from 3/B:address) (between [  ] [ 10 ]) 3 (0/A:address 3/B:address 5/Declassify:uint256 6/Declassify:uint256 28/Declassify:uint256) (43/Declassify:uint256) 
    (define 45/PrimApp:uint256 (TXN_VALUE))
    (define 46/PrimApp:bool (PEQ 45/PrimApp:uint256 0))
    (require! 46/PrimApp:bool)
    (define 47/PrimApp:bool (PLE 0 43/Declassify:uint256))
    (define 48/PrimApp:bool (PLT 43/Declassify:uint256 3))
    (define 49/PureIf:bool (IF_THEN_ELSE 47/PrimApp:bool 48/PrimApp:bool False))
    (require! 49/PureIf:bool)
    (wait! 4 (0/A:address 3/B:address 5/Declassify:uint256 6/Declassify:uint256 28/Declassify:uint256 43/Declassify:uint256))]
  [5 (#:from 0/A:address) (between [  ] [ 10 ]) 4 (0/A:address 3/B:address 5/Declassify:uint256 6/Declassify:uint256 28/Declassify:uint256 43/Declassify:uint256) (50/Declassify:uint256 51/Declassify:uint256) 
    (define 60/PrimApp:uint256 (TXN_VALUE))
    (define 61/PrimApp:bool (PEQ 60/PrimApp:uint256 0))
    (require! 61/PrimApp:bool)
    (define 62/Digest:uint256 (digest 50/Declassify:uint256 51/Declassify:uint256))
    (define 63/PrimApp:bool (PEQ 28/Declassify:uint256 62/Digest:uint256))
    (require! 63/PrimApp:bool)
    (define 64/PrimApp:bool (PLE 0 51/Declassify:uint256))
    (define 65/PrimApp:bool (PLT 51/Declassify:uint256 3))
    (define 66/PureIf:bool (IF_THEN_ELSE 64/PrimApp:bool 65/PrimApp:bool False))
    (require! 66/PureIf:bool)
    (define 67/PrimApp:bool (PLE 0 51/Declassify:uint256))
    (define 68/PrimApp:bool (PLT 51/Declassify:uint256 3))
    (define 69/PureIf:bool (IF_THEN_ELSE 67/PrimApp:bool 68/PrimApp:bool False))
    (define 70/PrimApp:bool (PLE 0 43/Declassify:uint256))
    (define 71/PrimApp:bool (PLT 43/Declassify:uint256 3))
    (define 72/PureIf:bool (IF_THEN_ELSE 70/PrimApp:bool 71/PrimApp:bool False))
    (define 73/PureIf:bool (IF_THEN_ELSE 69/PureIf:bool 72/PureIf:bool False))
    (define 74/PrimApp:uint256 (SUB 4 43/Declassify:uint256))
    (define 75/PrimApp:uint256 (ADD 51/Declassify:uint256 74/PrimApp:uint256))
    (define 76/PrimApp:uint256 (MOD 75/PrimApp:uint256 3))
    (define 77/PureIf:uint256 (IF_THEN_ELSE 72/PureIf:bool 0 1))
    (define 78/PureIf:uint256 (IF_THEN_ELSE 69/PureIf:bool 2 77/PureIf:uint256))
    (define 79/PureIf:uint256 (IF_THEN_ELSE 73/PureIf:bool 76/PrimApp:uint256 78/PureIf:uint256))
    (define 80/PrimApp:bool (PLE 0 79/PureIf:uint256))
    (define 81/PrimApp:bool (PLT 79/PureIf:uint256 5))
    (define 82/PureIf:bool (IF_THEN_ELSE 80/PrimApp:bool 81/PrimApp:bool False))
    (assert! 82/PureIf:bool)
    (define 83/PrimApp:bool (PEQ 79/PureIf:uint256 2))
    (define 84/PrimApp:bool (PLE 0 51/Declassify:uint256))
    (define 85/PrimApp:bool (PLT 51/Declassify:uint256 3))
    (define 86/PureIf:bool (IF_THEN_ELSE 84/PrimApp:bool 85/PrimApp:bool False))
    (define 87/PureIf:bool (IF_THEN_ELSE 83/PrimApp:bool False True))
    (define 88/PureIf:bool (IF_THEN_ELSE 87/PureIf:bool True 86/PureIf:bool))
    (assert! 88/PureIf:bool)
    (define 89/PrimApp:bool (PEQ 79/PureIf:uint256 0))
    (define 90/PrimApp:bool (PLE 0 43/Declassify:uint256))
    (define 91/PrimApp:bool (PLT 43/Declassify:uint256 3))
    (define 92/PureIf:bool (IF_THEN_ELSE 90/PrimApp:bool 91/PrimApp:bool False))
    (define 93/PureIf:bool (IF_THEN_ELSE 89/PrimApp:bool False True))
    (define 94/PureIf:bool (IF_THEN_ELSE 93/PureIf:bool True 92/PureIf:bool))
    (assert! 94/PureIf:bool)
    (define 95/PrimApp:bool (PEQ 79/PureIf:uint256 2))
    (define 96/PrimApp:bool (PEQ 51/Declassify:uint256 0))
    (define 97/PureIf:bool (IF_THEN_ELSE 96/PrimApp:bool 95/PrimApp:bool False))
    (possible? 97/PureIf:bool)
    (define 98/PrimApp:bool (PEQ 51/Declassify:uint256 1))
    (define 99/PureIf:bool (IF_THEN_ELSE 98/PrimApp:bool 95/PrimApp:bool False))
    (possible? 99/PureIf:bool)
    (define 100/PrimApp:bool (PEQ 51/Declassify:uint256 2))
    (define 101/PureIf:bool (IF_THEN_ELSE 100/PrimApp:bool 95/PrimApp:bool False))
    (possible? 101/PureIf:bool)
    (define 102/PrimApp:bool (PEQ 79/PureIf:uint256 0))
    (define 103/PrimApp:bool (PEQ 43/Declassify:uint256 0))
    (define 104/PureIf:bool (IF_THEN_ELSE 103/PrimApp:bool 102/PrimApp:bool False))
    (possible? 104/PureIf:bool)
    (define 105/PrimApp:bool (PEQ 43/Declassify:uint256 1))
    (define 106/PureIf:bool (IF_THEN_ELSE 105/PrimApp:bool 102/PrimApp:bool False))
    (possible? 106/PureIf:bool)
    (define 107/PrimApp:bool (PEQ 43/Declassify:uint256 2))
    (define 108/PureIf:bool (IF_THEN_ELSE 107/PrimApp:bool 102/PrimApp:bool False))
    (possible? 108/PureIf:bool)
    (define 109/PrimApp:bool (PEQ 79/PureIf:uint256 2))
    (define 110/PrimApp:uint256 (MUL 2 5/Declassify:uint256))
    (define 111/PrimApp:bool (PEQ 79/PureIf:uint256 0))
    (define 112/PrimApp:uint256 (MUL 2 5/Declassify:uint256))
    (define 113/PureIf:uint256 (IF_THEN_ELSE 111/PrimApp:bool 0 5/Declassify:uint256))
    (define 114/PureIf:uint256 (IF_THEN_ELSE 111/PrimApp:bool 112/PrimApp:uint256 5/Declassify:uint256))
    (define 115/PureIf:uint256 (IF_THEN_ELSE 109/PrimApp:bool 110/PrimApp:uint256 113/PureIf:uint256))
    (define 116/PureIf:uint256 (IF_THEN_ELSE 109/PrimApp:bool 0 114/PureIf:uint256))
    (define 117/PrimApp:uint256 (ADD 6/Declassify:uint256 115/PureIf:uint256))
    (transfer! 0/A:address 117/PrimApp:uint256)
    (transfer! 3/B:address 116/PureIf:uint256)
    (halt!)]
  [6 (#:from 3/B:address) (between [ 10 ] [  ]) 4 (0/A:address 3/B:address 5/Declassify:uint256 6/Declassify:uint256 28/Declassify:uint256 43/Declassify:uint256) () 
    (define 130/PrimApp:uint256 (TXN_VALUE))
    (define 131/PrimApp:bool (PEQ 130/PrimApp:uint256 0))
    (require! 131/PrimApp:bool)
    (define 132/PrimApp:uint256 (BALANCE))
    (transfer! 3/B:address 132/PrimApp:uint256)
    (halt!)]
  [7 (#:from 0/A:address) (between [ 10 ] [  ]) 3 (0/A:address 3/B:address 5/Declassify:uint256 6/Declassify:uint256 28/Declassify:uint256) () 
    (define 133/PrimApp:uint256 (TXN_VALUE))
    (define 134/PrimApp:bool (PEQ 133/PrimApp:uint256 0))
    (require! 134/PrimApp:bool)
    (define 135/PrimApp:uint256 (BALANCE))
    (transfer! 0/A:address 135/PrimApp:uint256)
    (halt!)]
  [8 (#:from 3/B:address) (between [ 10 ] [  ]) 2 (0/A:address 3/B:address 5/Declassify:uint256 6/Declassify:uint256) () 
    (define 136/PrimApp:uint256 (TXN_VALUE))
    (define 137/PrimApp:bool (PEQ 136/PrimApp:uint256 0))
    (require! 137/PrimApp:bool)
    (define 138/PrimApp:uint256 (BALANCE))
    (transfer! 3/B:address 138/PrimApp:uint256)
    (halt!)]
  [9 (#:from 0/A:address) (between [ 10 ] [  ]) 1 (0/A:address 5/Declassify:uint256 6/Declassify:uint256) () 
    (define 139/PrimApp:uint256 (TXN_VALUE))
    (define 140/PrimApp:bool (PEQ 139/PrimApp:uint256 0))
    (require! 140/PrimApp:bool)
    (define 141/PrimApp:uint256 (BALANCE))
    (transfer! 0/A:address 141/PrimApp:uint256)
    (halt!)])

(define-participant (0, (A, address)) 
  (1/_wagerAmount:uint256 2/_escrowAmount:uint256)
  
  (define 5/Declassify:uint256 1/_wagerAmount:uint256)
  (define 6/Declassify:uint256 2/_escrowAmount:uint256)
  (define 7/Interact:bool (interact.params bool ))
  (define 8/PrimApp:uint256 (ADD 5/Declassify:uint256 6/Declassify:uint256))
  (send! (#:join 0/A:address) 1 () (5/Declassify:uint256 6/Declassify:uint256) 8/PrimApp:uint256 )
  (define 9/PrimApp:uint256 (TXN_VALUE))
  (define 10/PrimApp:uint256 (ADD 5/Declassify:uint256 6/Declassify:uint256))
  (define 11/PrimApp:bool (PEQ 9/PrimApp:uint256 10/PrimApp:uint256))
  (require! 11/PrimApp:bool)
  (from-consensus (define-values (0/A:address 5/Declassify:uint256 6/Declassify:uint256) () (recv! (#:join 3/B:address) 2 
    #:timeout 10 
      (begin 
        (require! True)
        (send! (#:from 0/A:address) 9 (0/A:address 5/Declassify:uint256 6/Declassify:uint256) () 0 )
        (define 139/PrimApp:uint256 (TXN_VALUE))
        (define 140/PrimApp:bool (PEQ 139/PrimApp:uint256 0))
        (require! 140/PrimApp:bool)
        (define 141/PrimApp:uint256 (BALANCE))
        (transfer! 0/A:address 141/PrimApp:uint256)
        (from-consensus "Bob quits"))))
  (define 13/PrimApp:uint256 (TXN_VALUE))
  (define 14/PrimApp:bool (PEQ 13/PrimApp:uint256 5/Declassify:uint256))
  (require! 14/PrimApp:bool)
  (from-consensus (define 15/Interact:bytes (interact.getHand bytes ))
  (define 16/PrimApp:bool (BYTES_EQ 15/Interact:bytes "ROCK"))
  (define 17/PrimApp:bool (BYTES_EQ 15/Interact:bytes "PAPER"))
  (define 18/PrimApp:bool (BYTES_EQ 15/Interact:bytes "SCISSORS"))
  (define 19/PureIf:bool (IF_THEN_ELSE 16/PrimApp:bool True 17/PrimApp:bool))
  (define 20/PureIf:bool (IF_THEN_ELSE 19/PureIf:bool True 18/PrimApp:bool))
  (assume! 20/PureIf:bool)
  (define 21/PureIf:uint256 (IF_THEN_ELSE 17/PrimApp:bool 1 2))
  (define 22/PureIf:uint256 (IF_THEN_ELSE 16/PrimApp:bool 0 21/PureIf:uint256))
  (define 23/PrimApp:bool (PLE 0 22/PureIf:uint256))
  (define 24/PrimApp:bool (PLT 22/PureIf:uint256 3))
  (define 25/PureIf:bool (IF_THEN_ELSE 23/PrimApp:bool 24/PrimApp:bool False))
  (assert! 25/PureIf:bool)
  (define 26/PrimApp:uint256 (RANDOM))
  (define 27/Digest:uint256 (digest 26/PrimApp:uint256 22/PureIf:uint256))
  (define 28/Declassify:uint256 27/Digest:uint256)
  (define 29/Interact:bool (interact.commits bool ))
  (send! (#:from 0/A:address) 3 (0/A:address 3/B:address 5/Declassify:uint256 6/Declassify:uint256) (28/Declassify:uint256) 0 
    #:timeout 10 
      (begin 
        (require! True)
        (define-values (0/A:address 3/B:address 5/Declassify:uint256 6/Declassify:uint256) () (recv! (#:from 3/B:address) 8 ))
        (define 136/PrimApp:uint256 (TXN_VALUE))
        (define 137/PrimApp:bool (PEQ 136/PrimApp:uint256 0))
        (require! 137/PrimApp:bool)
        (define 138/PrimApp:uint256 (BALANCE))
        (transfer! 3/B:address 138/PrimApp:uint256)
        (from-consensus "Alice quits")))
  (define 30/PrimApp:uint256 (TXN_VALUE))
  (define 31/PrimApp:bool (PEQ 30/PrimApp:uint256 0))
  (require! 31/PrimApp:bool)
  (from-consensus (define-values (0/A:address 3/B:address 5/Declassify:uint256 6/Declassify:uint256 28/Declassify:uint256) (43/Declassify:uint256) (recv! (#:from 3/B:address) 4 
    #:timeout 10 
      (begin 
        (require! True)
        (send! (#:from 0/A:address) 7 (0/A:address 3/B:address 5/Declassify:uint256 6/Declassify:uint256 28/Declassify:uint256) () 0 )
        (define 133/PrimApp:uint256 (TXN_VALUE))
        (define 134/PrimApp:bool (PEQ 133/PrimApp:uint256 0))
        (require! 134/PrimApp:bool)
        (define 135/PrimApp:uint256 (BALANCE))
        (transfer! 0/A:address 135/PrimApp:uint256)
        (from-consensus "Bob quits"))))
  (define 45/PrimApp:uint256 (TXN_VALUE))
  (define 46/PrimApp:bool (PEQ 45/PrimApp:uint256 0))
  (require! 46/PrimApp:bool)
  (define 47/PrimApp:bool (PLE 0 43/Declassify:uint256))
  (define 48/PrimApp:bool (PLT 43/Declassify:uint256 3))
  (define 49/PureIf:bool (IF_THEN_ELSE 47/PrimApp:bool 48/PrimApp:bool False))
  (require! 49/PureIf:bool)
  (from-consensus (define 50/Declassify:uint256 26/PrimApp:uint256)
  (define 51/Declassify:uint256 22/PureIf:uint256)
  (define 52/PrimApp:bool (PLE 0 43/Declassify:uint256))
  (define 53/PrimApp:bool (PLT 43/Declassify:uint256 3))
  (define 54/PureIf:bool (IF_THEN_ELSE 52/PrimApp:bool 53/PrimApp:bool False))
  (require! 54/PureIf:bool)
  (define 55/PrimApp:bool (PEQ 43/Declassify:uint256 0))
  (define 56/PrimApp:bool (PEQ 43/Declassify:uint256 1))
  (define 57/PureIf:bytes (IF_THEN_ELSE 56/PrimApp:bool "PAPER" "SCISSORS"))
  (define 58/PureIf:bytes (IF_THEN_ELSE 55/PrimApp:bool "ROCK" 57/PureIf:bytes))
  (define 59/Interact:bool (interact.reveals bool 58/PureIf:bytes))
  (send! (#:from 0/A:address) 5 (0/A:address 3/B:address 5/Declassify:uint256 6/Declassify:uint256 28/Declassify:uint256 43/Declassify:uint256) (50/Declassify:uint256 51/Declassify:uint256) 0 
    #:timeout 10 
      (begin 
        (require! True)
        (define-values (0/A:address 3/B:address 5/Declassify:uint256 6/Declassify:uint256 28/Declassify:uint256 43/Declassify:uint256) () (recv! (#:from 3/B:address) 6 ))
        (define 130/PrimApp:uint256 (TXN_VALUE))
        (define 131/PrimApp:bool (PEQ 130/PrimApp:uint256 0))
        (require! 131/PrimApp:bool)
        (define 132/PrimApp:uint256 (BALANCE))
        (transfer! 3/B:address 132/PrimApp:uint256)
        (from-consensus "Alice quits")))
  (define 60/PrimApp:uint256 (TXN_VALUE))
  (define 61/PrimApp:bool (PEQ 60/PrimApp:uint256 0))
  (require! 61/PrimApp:bool)
  (define 62/Digest:uint256 (digest 50/Declassify:uint256 51/Declassify:uint256))
  (define 63/PrimApp:bool (PEQ 28/Declassify:uint256 62/Digest:uint256))
  (require! 63/PrimApp:bool)
  (define 64/PrimApp:bool (PLE 0 51/Declassify:uint256))
  (define 65/PrimApp:bool (PLT 51/Declassify:uint256 3))
  (define 66/PureIf:bool (IF_THEN_ELSE 64/PrimApp:bool 65/PrimApp:bool False))
  (require! 66/PureIf:bool)
  (define 67/PrimApp:bool (PLE 0 51/Declassify:uint256))
  (define 68/PrimApp:bool (PLT 51/Declassify:uint256 3))
  (define 69/PureIf:bool (IF_THEN_ELSE 67/PrimApp:bool 68/PrimApp:bool False))
  (define 70/PrimApp:bool (PLE 0 43/Declassify:uint256))
  (define 71/PrimApp:bool (PLT 43/Declassify:uint256 3))
  (define 72/PureIf:bool (IF_THEN_ELSE 70/PrimApp:bool 71/PrimApp:bool False))
  (define 73/PureIf:bool (IF_THEN_ELSE 69/PureIf:bool 72/PureIf:bool False))
  (define 74/PrimApp:uint256 (SUB 4 43/Declassify:uint256))
  (define 75/PrimApp:uint256 (ADD 51/Declassify:uint256 74/PrimApp:uint256))
  (define 76/PrimApp:uint256 (MOD 75/PrimApp:uint256 3))
  (define 77/PureIf:uint256 (IF_THEN_ELSE 72/PureIf:bool 0 1))
  (define 78/PureIf:uint256 (IF_THEN_ELSE 69/PureIf:bool 2 77/PureIf:uint256))
  (define 79/PureIf:uint256 (IF_THEN_ELSE 73/PureIf:bool 76/PrimApp:uint256 78/PureIf:uint256))
  (define 80/PrimApp:bool (PLE 0 79/PureIf:uint256))
  (define 81/PrimApp:bool (PLT 79/PureIf:uint256 5))
  (define 82/PureIf:bool (IF_THEN_ELSE 80/PrimApp:bool 81/PrimApp:bool False))
  (assert! 82/PureIf:bool)
  (define 83/PrimApp:bool (PEQ 79/PureIf:uint256 2))
  (define 84/PrimApp:bool (PLE 0 51/Declassify:uint256))
  (define 85/PrimApp:bool (PLT 51/Declassify:uint256 3))
  (define 86/PureIf:bool (IF_THEN_ELSE 84/PrimApp:bool 85/PrimApp:bool False))
  (define 87/PureIf:bool (IF_THEN_ELSE 83/PrimApp:bool False True))
  (define 88/PureIf:bool (IF_THEN_ELSE 87/PureIf:bool True 86/PureIf:bool))
  (assert! 88/PureIf:bool)
  (define 89/PrimApp:bool (PEQ 79/PureIf:uint256 0))
  (define 90/PrimApp:bool (PLE 0 43/Declassify:uint256))
  (define 91/PrimApp:bool (PLT 43/Declassify:uint256 3))
  (define 92/PureIf:bool (IF_THEN_ELSE 90/PrimApp:bool 91/PrimApp:bool False))
  (define 93/PureIf:bool (IF_THEN_ELSE 89/PrimApp:bool False True))
  (define 94/PureIf:bool (IF_THEN_ELSE 93/PureIf:bool True 92/PureIf:bool))
  (assert! 94/PureIf:bool)
  (define 95/PrimApp:bool (PEQ 79/PureIf:uint256 2))
  (define 96/PrimApp:bool (PEQ 51/Declassify:uint256 0))
  (define 97/PureIf:bool (IF_THEN_ELSE 96/PrimApp:bool 95/PrimApp:bool False))
  (possible? 97/PureIf:bool)
  (define 98/PrimApp:bool (PEQ 51/Declassify:uint256 1))
  (define 99/PureIf:bool (IF_THEN_ELSE 98/PrimApp:bool 95/PrimApp:bool False))
  (possible? 99/PureIf:bool)
  (define 100/PrimApp:bool (PEQ 51/Declassify:uint256 2))
  (define 101/PureIf:bool (IF_THEN_ELSE 100/PrimApp:bool 95/PrimApp:bool False))
  (possible? 101/PureIf:bool)
  (define 102/PrimApp:bool (PEQ 79/PureIf:uint256 0))
  (define 103/PrimApp:bool (PEQ 43/Declassify:uint256 0))
  (define 104/PureIf:bool (IF_THEN_ELSE 103/PrimApp:bool 102/PrimApp:bool False))
  (possible? 104/PureIf:bool)
  (define 105/PrimApp:bool (PEQ 43/Declassify:uint256 1))
  (define 106/PureIf:bool (IF_THEN_ELSE 105/PrimApp:bool 102/PrimApp:bool False))
  (possible? 106/PureIf:bool)
  (define 107/PrimApp:bool (PEQ 43/Declassify:uint256 2))
  (define 108/PureIf:bool (IF_THEN_ELSE 107/PrimApp:bool 102/PrimApp:bool False))
  (possible? 108/PureIf:bool)
  (define 109/PrimApp:bool (PEQ 79/PureIf:uint256 2))
  (define 110/PrimApp:uint256 (MUL 2 5/Declassify:uint256))
  (define 111/PrimApp:bool (PEQ 79/PureIf:uint256 0))
  (define 112/PrimApp:uint256 (MUL 2 5/Declassify:uint256))
  (define 113/PureIf:uint256 (IF_THEN_ELSE 111/PrimApp:bool 0 5/Declassify:uint256))
  (define 114/PureIf:uint256 (IF_THEN_ELSE 111/PrimApp:bool 112/PrimApp:uint256 5/Declassify:uint256))
  (define 115/PureIf:uint256 (IF_THEN_ELSE 109/PrimApp:bool 110/PrimApp:uint256 113/PureIf:uint256))
  (define 116/PureIf:uint256 (IF_THEN_ELSE 109/PrimApp:bool 0 114/PureIf:uint256))
  (define 117/PrimApp:uint256 (ADD 6/Declassify:uint256 115/PureIf:uint256))
  (transfer! 0/A:address 117/PrimApp:uint256)
  (transfer! 3/B:address 116/PureIf:uint256)
  (from-consensus (define 118/Interact:bool (interact.outcome bool ))
  (define 119/PrimApp:bool (PLE 0 79/PureIf:uint256))
  (define 120/PrimApp:bool (PLT 79/PureIf:uint256 5))
  (define 121/PureIf:bool (IF_THEN_ELSE 119/PrimApp:bool 120/PrimApp:bool False))
  (require! 121/PureIf:bool)
  (define 122/PrimApp:bool (PEQ 79/PureIf:uint256 0))
  (define 123/PrimApp:bool (PEQ 79/PureIf:uint256 1))
  (define 124/PrimApp:bool (PEQ 79/PureIf:uint256 2))
  (define 125/PrimApp:bool (PEQ 79/PureIf:uint256 3))
  (define 126/PureIf:bytes (IF_THEN_ELSE 125/PrimApp:bool "Alice quits" "Bob quits"))
  (define 127/PureIf:bytes (IF_THEN_ELSE 124/PrimApp:bool "Alice wins" 126/PureIf:bytes))
  (define 128/PureIf:bytes (IF_THEN_ELSE 123/PrimApp:bool "Draw" 127/PureIf:bytes))
  (define 129/PureIf:bytes (IF_THEN_ELSE 122/PrimApp:bool "Bob wins" 128/PureIf:bytes))
  129/PureIf:bytes))))))

(define-participant (3, (B, address)) 
  ()
  
  (define-values () (5/Declassify:uint256 6/Declassify:uint256) (recv! (#:join 0/A:address) 1 ))
  (define 9/PrimApp:uint256 (TXN_VALUE))
  (define 10/PrimApp:uint256 (ADD 5/Declassify:uint256 6/Declassify:uint256))
  (define 11/PrimApp:bool (PEQ 9/PrimApp:uint256 10/PrimApp:uint256))
  (require! 11/PrimApp:bool)
  (from-consensus (define 12/Interact:bool (interact.accepts bool 5/Declassify:uint256 6/Declassify:uint256))
  (send! (#:join 3/B:address) 2 (0/A:address 5/Declassify:uint256 6/Declassify:uint256) () 5/Declassify:uint256 
    #:timeout 10 
      (begin 
        (require! True)
        (define-values (0/A:address 5/Declassify:uint256 6/Declassify:uint256) () (recv! (#:from 0/A:address) 9 ))
        (define 139/PrimApp:uint256 (TXN_VALUE))
        (define 140/PrimApp:bool (PEQ 139/PrimApp:uint256 0))
        (require! 140/PrimApp:bool)
        (define 141/PrimApp:uint256 (BALANCE))
        (transfer! 0/A:address 141/PrimApp:uint256)
        (from-consensus "Bob quits")))
  (define 13/PrimApp:uint256 (TXN_VALUE))
  (define 14/PrimApp:bool (PEQ 13/PrimApp:uint256 5/Declassify:uint256))
  (require! 14/PrimApp:bool)
  (from-consensus (define-values (0/A:address 3/B:address 5/Declassify:uint256 6/Declassify:uint256) (28/Declassify:uint256) (recv! (#:from 0/A:address) 3 
    #:timeout 10 
      (begin 
        (require! True)
        (send! (#:from 3/B:address) 8 (0/A:address 3/B:address 5/Declassify:uint256 6/Declassify:uint256) () 0 )
        (define 136/PrimApp:uint256 (TXN_VALUE))
        (define 137/PrimApp:bool (PEQ 136/PrimApp:uint256 0))
        (require! 137/PrimApp:bool)
        (define 138/PrimApp:uint256 (BALANCE))
        (transfer! 3/B:address 138/PrimApp:uint256)
        (from-consensus "Alice quits"))))
  (define 30/PrimApp:uint256 (TXN_VALUE))
  (define 31/PrimApp:bool (PEQ 30/PrimApp:uint256 0))
  (require! 31/PrimApp:bool)
  (from-consensus (define 32/Interact:bytes (interact.getHand bytes ))
  (define 33/PrimApp:bool (BYTES_EQ 32/Interact:bytes "ROCK"))
  (define 34/PrimApp:bool (BYTES_EQ 32/Interact:bytes "PAPER"))
  (define 35/PrimApp:bool (BYTES_EQ 32/Interact:bytes "SCISSORS"))
  (define 36/PureIf:bool (IF_THEN_ELSE 33/PrimApp:bool True 34/PrimApp:bool))
  (define 37/PureIf:bool (IF_THEN_ELSE 36/PureIf:bool True 35/PrimApp:bool))
  (assume! 37/PureIf:bool)
  (define 38/PureIf:uint256 (IF_THEN_ELSE 34/PrimApp:bool 1 2))
  (define 39/PureIf:uint256 (IF_THEN_ELSE 33/PrimApp:bool 0 38/PureIf:uint256))
  (define 40/PrimApp:bool (PLE 0 39/PureIf:uint256))
  (define 41/PrimApp:bool (PLT 39/PureIf:uint256 3))
  (define 42/PureIf:bool (IF_THEN_ELSE 40/PrimApp:bool 41/PrimApp:bool False))
  (assert! 42/PureIf:bool)
  (define 43/Declassify:uint256 39/PureIf:uint256)
  (define 44/Interact:bool (interact.shows bool ))
  (send! (#:from 3/B:address) 4 (0/A:address 3/B:address 5/Declassify:uint256 6/Declassify:uint256 28/Declassify:uint256) (43/Declassify:uint256) 0 
    #:timeout 10 
      (begin 
        (require! True)
        (define-values (0/A:address 3/B:address 5/Declassify:uint256 6/Declassify:uint256 28/Declassify:uint256) () (recv! (#:from 0/A:address) 7 ))
        (define 133/PrimApp:uint256 (TXN_VALUE))
        (define 134/PrimApp:bool (PEQ 133/PrimApp:uint256 0))
        (require! 134/PrimApp:bool)
        (define 135/PrimApp:uint256 (BALANCE))
        (transfer! 0/A:address 135/PrimApp:uint256)
        (from-consensus "Bob quits")))
  (define 45/PrimApp:uint256 (TXN_VALUE))
  (define 46/PrimApp:bool (PEQ 45/PrimApp:uint256 0))
  (require! 46/PrimApp:bool)
  (define 47/PrimApp:bool (PLE 0 43/Declassify:uint256))
  (define 48/PrimApp:bool (PLT 43/Declassify:uint256 3))
  (define 49/PureIf:bool (IF_THEN_ELSE 47/PrimApp:bool 48/PrimApp:bool False))
  (require! 49/PureIf:bool)
  (from-consensus (define-values (0/A:address 3/B:address 5/Declassify:uint256 6/Declassify:uint256 28/Declassify:uint256 43/Declassify:uint256) (50/Declassify:uint256 51/Declassify:uint256) (recv! (#:from 0/A:address) 5 
    #:timeout 10 
      (begin 
        (require! True)
        (send! (#:from 3/B:address) 6 (0/A:address 3/B:address 5/Declassify:uint256 6/Declassify:uint256 28/Declassify:uint256 43/Declassify:uint256) () 0 )
        (define 130/PrimApp:uint256 (TXN_VALUE))
        (define 131/PrimApp:bool (PEQ 130/PrimApp:uint256 0))
        (require! 131/PrimApp:bool)
        (define 132/PrimApp:uint256 (BALANCE))
        (transfer! 3/B:address 132/PrimApp:uint256)
        (from-consensus "Alice quits"))))
  (define 60/PrimApp:uint256 (TXN_VALUE))
  (define 61/PrimApp:bool (PEQ 60/PrimApp:uint256 0))
  (require! 61/PrimApp:bool)
  (define 62/Digest:uint256 (digest 50/Declassify:uint256 51/Declassify:uint256))
  (define 63/PrimApp:bool (PEQ 28/Declassify:uint256 62/Digest:uint256))
  (require! 63/PrimApp:bool)
  (define 64/PrimApp:bool (PLE 0 51/Declassify:uint256))
  (define 65/PrimApp:bool (PLT 51/Declassify:uint256 3))
  (define 66/PureIf:bool (IF_THEN_ELSE 64/PrimApp:bool 65/PrimApp:bool False))
  (require! 66/PureIf:bool)
  (define 67/PrimApp:bool (PLE 0 51/Declassify:uint256))
  (define 68/PrimApp:bool (PLT 51/Declassify:uint256 3))
  (define 69/PureIf:bool (IF_THEN_ELSE 67/PrimApp:bool 68/PrimApp:bool False))
  (define 70/PrimApp:bool (PLE 0 43/Declassify:uint256))
  (define 71/PrimApp:bool (PLT 43/Declassify:uint256 3))
  (define 72/PureIf:bool (IF_THEN_ELSE 70/PrimApp:bool 71/PrimApp:bool False))
  (define 73/PureIf:bool (IF_THEN_ELSE 69/PureIf:bool 72/PureIf:bool False))
  (define 74/PrimApp:uint256 (SUB 4 43/Declassify:uint256))
  (define 75/PrimApp:uint256 (ADD 51/Declassify:uint256 74/PrimApp:uint256))
  (define 76/PrimApp:uint256 (MOD 75/PrimApp:uint256 3))
  (define 77/PureIf:uint256 (IF_THEN_ELSE 72/PureIf:bool 0 1))
  (define 78/PureIf:uint256 (IF_THEN_ELSE 69/PureIf:bool 2 77/PureIf:uint256))
  (define 79/PureIf:uint256 (IF_THEN_ELSE 73/PureIf:bool 76/PrimApp:uint256 78/PureIf:uint256))
  (define 80/PrimApp:bool (PLE 0 79/PureIf:uint256))
  (define 81/PrimApp:bool (PLT 79/PureIf:uint256 5))
  (define 82/PureIf:bool (IF_THEN_ELSE 80/PrimApp:bool 81/PrimApp:bool False))
  (assert! 82/PureIf:bool)
  (define 83/PrimApp:bool (PEQ 79/PureIf:uint256 2))
  (define 84/PrimApp:bool (PLE 0 51/Declassify:uint256))
  (define 85/PrimApp:bool (PLT 51/Declassify:uint256 3))
  (define 86/PureIf:bool (IF_THEN_ELSE 84/PrimApp:bool 85/PrimApp:bool False))
  (define 87/PureIf:bool (IF_THEN_ELSE 83/PrimApp:bool False True))
  (define 88/PureIf:bool (IF_THEN_ELSE 87/PureIf:bool True 86/PureIf:bool))
  (assert! 88/PureIf:bool)
  (define 89/PrimApp:bool (PEQ 79/PureIf:uint256 0))
  (define 90/PrimApp:bool (PLE 0 43/Declassify:uint256))
  (define 91/PrimApp:bool (PLT 43/Declassify:uint256 3))
  (define 92/PureIf:bool (IF_THEN_ELSE 90/PrimApp:bool 91/PrimApp:bool False))
  (define 93/PureIf:bool (IF_THEN_ELSE 89/PrimApp:bool False True))
  (define 94/PureIf:bool (IF_THEN_ELSE 93/PureIf:bool True 92/PureIf:bool))
  (assert! 94/PureIf:bool)
  (define 95/PrimApp:bool (PEQ 79/PureIf:uint256 2))
  (define 96/PrimApp:bool (PEQ 51/Declassify:uint256 0))
  (define 97/PureIf:bool (IF_THEN_ELSE 96/PrimApp:bool 95/PrimApp:bool False))
  (possible? 97/PureIf:bool)
  (define 98/PrimApp:bool (PEQ 51/Declassify:uint256 1))
  (define 99/PureIf:bool (IF_THEN_ELSE 98/PrimApp:bool 95/PrimApp:bool False))
  (possible? 99/PureIf:bool)
  (define 100/PrimApp:bool (PEQ 51/Declassify:uint256 2))
  (define 101/PureIf:bool (IF_THEN_ELSE 100/PrimApp:bool 95/PrimApp:bool False))
  (possible? 101/PureIf:bool)
  (define 102/PrimApp:bool (PEQ 79/PureIf:uint256 0))
  (define 103/PrimApp:bool (PEQ 43/Declassify:uint256 0))
  (define 104/PureIf:bool (IF_THEN_ELSE 103/PrimApp:bool 102/PrimApp:bool False))
  (possible? 104/PureIf:bool)
  (define 105/PrimApp:bool (PEQ 43/Declassify:uint256 1))
  (define 106/PureIf:bool (IF_THEN_ELSE 105/PrimApp:bool 102/PrimApp:bool False))
  (possible? 106/PureIf:bool)
  (define 107/PrimApp:bool (PEQ 43/Declassify:uint256 2))
  (define 108/PureIf:bool (IF_THEN_ELSE 107/PrimApp:bool 102/PrimApp:bool False))
  (possible? 108/PureIf:bool)
  (define 109/PrimApp:bool (PEQ 79/PureIf:uint256 2))
  (define 110/PrimApp:uint256 (MUL 2 5/Declassify:uint256))
  (define 111/PrimApp:bool (PEQ 79/PureIf:uint256 0))
  (define 112/PrimApp:uint256 (MUL 2 5/Declassify:uint256))
  (define 113/PureIf:uint256 (IF_THEN_ELSE 111/PrimApp:bool 0 5/Declassify:uint256))
  (define 114/PureIf:uint256 (IF_THEN_ELSE 111/PrimApp:bool 112/PrimApp:uint256 5/Declassify:uint256))
  (define 115/PureIf:uint256 (IF_THEN_ELSE 109/PrimApp:bool 110/PrimApp:uint256 113/PureIf:uint256))
  (define 116/PureIf:uint256 (IF_THEN_ELSE 109/PrimApp:bool 0 114/PureIf:uint256))
  (define 117/PrimApp:uint256 (ADD 6/Declassify:uint256 115/PureIf:uint256))
  (transfer! 0/A:address 117/PrimApp:uint256)
  (transfer! 3/B:address 116/PureIf:uint256)
  (from-consensus (define 118/Interact:bool (interact.outcome bool ))
  (define 119/PrimApp:bool (PLE 0 79/PureIf:uint256))
  (define 120/PrimApp:bool (PLT 79/PureIf:uint256 5))
  (define 121/PureIf:bool (IF_THEN_ELSE 119/PrimApp:bool 120/PrimApp:bool False))
  (require! 121/PureIf:bool)
  (define 122/PrimApp:bool (PEQ 79/PureIf:uint256 0))
  (define 123/PrimApp:bool (PEQ 79/PureIf:uint256 1))
  (define 124/PrimApp:bool (PEQ 79/PureIf:uint256 2))
  (define 125/PrimApp:bool (PEQ 79/PureIf:uint256 3))
  (define 126/PureIf:bytes (IF_THEN_ELSE 125/PrimApp:bool "Alice quits" "Bob quits"))
  (define 127/PureIf:bytes (IF_THEN_ELSE 124/PrimApp:bool "Alice wins" 126/PureIf:bytes))
  (define 128/PureIf:bytes (IF_THEN_ELSE 123/PrimApp:bool "Draw" 127/PureIf:bytes))
  (define 129/PureIf:bytes (IF_THEN_ELSE 122/PrimApp:bool "Bob wins" 128/PureIf:bytes))
  129/PureIf:bytes))))))

(define-participant (4, (O, address)) 
  ()
  
  (define-values () (5/Declassify:uint256 6/Declassify:uint256) (recv! (#:join 0/A:address) 1 ))
  (define 9/PrimApp:uint256 (TXN_VALUE))
  (define 10/PrimApp:uint256 (ADD 5/Declassify:uint256 6/Declassify:uint256))
  (define 11/PrimApp:bool (PEQ 9/PrimApp:uint256 10/PrimApp:uint256))
  (require! 11/PrimApp:bool)
  (from-consensus (define-values (0/A:address 5/Declassify:uint256 6/Declassify:uint256) () (recv! (#:join 3/B:address) 2 
    #:timeout 10 
      (begin 
        (require! True)
        (define-values (0/A:address 5/Declassify:uint256 6/Declassify:uint256) () (recv! (#:from 0/A:address) 9 ))
        (define 139/PrimApp:uint256 (TXN_VALUE))
        (define 140/PrimApp:bool (PEQ 139/PrimApp:uint256 0))
        (require! 140/PrimApp:bool)
        (define 141/PrimApp:uint256 (BALANCE))
        (transfer! 0/A:address 141/PrimApp:uint256)
        (from-consensus "Bob quits"))))
  (define 13/PrimApp:uint256 (TXN_VALUE))
  (define 14/PrimApp:bool (PEQ 13/PrimApp:uint256 5/Declassify:uint256))
  (require! 14/PrimApp:bool)
  (from-consensus (define-values (0/A:address 3/B:address 5/Declassify:uint256 6/Declassify:uint256) (28/Declassify:uint256) (recv! (#:from 0/A:address) 3 
    #:timeout 10 
      (begin 
        (require! True)
        (define-values (0/A:address 3/B:address 5/Declassify:uint256 6/Declassify:uint256) () (recv! (#:from 3/B:address) 8 ))
        (define 136/PrimApp:uint256 (TXN_VALUE))
        (define 137/PrimApp:bool (PEQ 136/PrimApp:uint256 0))
        (require! 137/PrimApp:bool)
        (define 138/PrimApp:uint256 (BALANCE))
        (transfer! 3/B:address 138/PrimApp:uint256)
        (from-consensus "Alice quits"))))
  (define 30/PrimApp:uint256 (TXN_VALUE))
  (define 31/PrimApp:bool (PEQ 30/PrimApp:uint256 0))
  (require! 31/PrimApp:bool)
  (from-consensus (define-values (0/A:address 3/B:address 5/Declassify:uint256 6/Declassify:uint256 28/Declassify:uint256) (43/Declassify:uint256) (recv! (#:from 3/B:address) 4 
    #:timeout 10 
      (begin 
        (require! True)
        (define-values (0/A:address 3/B:address 5/Declassify:uint256 6/Declassify:uint256 28/Declassify:uint256) () (recv! (#:from 0/A:address) 7 ))
        (define 133/PrimApp:uint256 (TXN_VALUE))
        (define 134/PrimApp:bool (PEQ 133/PrimApp:uint256 0))
        (require! 134/PrimApp:bool)
        (define 135/PrimApp:uint256 (BALANCE))
        (transfer! 0/A:address 135/PrimApp:uint256)
        (from-consensus "Bob quits"))))
  (define 45/PrimApp:uint256 (TXN_VALUE))
  (define 46/PrimApp:bool (PEQ 45/PrimApp:uint256 0))
  (require! 46/PrimApp:bool)
  (define 47/PrimApp:bool (PLE 0 43/Declassify:uint256))
  (define 48/PrimApp:bool (PLT 43/Declassify:uint256 3))
  (define 49/PureIf:bool (IF_THEN_ELSE 47/PrimApp:bool 48/PrimApp:bool False))
  (require! 49/PureIf:bool)
  (from-consensus (define-values (0/A:address 3/B:address 5/Declassify:uint256 6/Declassify:uint256 28/Declassify:uint256 43/Declassify:uint256) (50/Declassify:uint256 51/Declassify:uint256) (recv! (#:from 0/A:address) 5 
    #:timeout 10 
      (begin 
        (require! True)
        (define-values (0/A:address 3/B:address 5/Declassify:uint256 6/Declassify:uint256 28/Declassify:uint256 43/Declassify:uint256) () (recv! (#:from 3/B:address) 6 ))
        (define 130/PrimApp:uint256 (TXN_VALUE))
        (define 131/PrimApp:bool (PEQ 130/PrimApp:uint256 0))
        (require! 131/PrimApp:bool)
        (define 132/PrimApp:uint256 (BALANCE))
        (transfer! 3/B:address 132/PrimApp:uint256)
        (from-consensus "Alice quits"))))
  (define 60/PrimApp:uint256 (TXN_VALUE))
  (define 61/PrimApp:bool (PEQ 60/PrimApp:uint256 0))
  (require! 61/PrimApp:bool)
  (define 62/Digest:uint256 (digest 50/Declassify:uint256 51/Declassify:uint256))
  (define 63/PrimApp:bool (PEQ 28/Declassify:uint256 62/Digest:uint256))
  (require! 63/PrimApp:bool)
  (define 64/PrimApp:bool (PLE 0 51/Declassify:uint256))
  (define 65/PrimApp:bool (PLT 51/Declassify:uint256 3))
  (define 66/PureIf:bool (IF_THEN_ELSE 64/PrimApp:bool 65/PrimApp:bool False))
  (require! 66/PureIf:bool)
  (define 67/PrimApp:bool (PLE 0 51/Declassify:uint256))
  (define 68/PrimApp:bool (PLT 51/Declassify:uint256 3))
  (define 69/PureIf:bool (IF_THEN_ELSE 67/PrimApp:bool 68/PrimApp:bool False))
  (define 70/PrimApp:bool (PLE 0 43/Declassify:uint256))
  (define 71/PrimApp:bool (PLT 43/Declassify:uint256 3))
  (define 72/PureIf:bool (IF_THEN_ELSE 70/PrimApp:bool 71/PrimApp:bool False))
  (define 73/PureIf:bool (IF_THEN_ELSE 69/PureIf:bool 72/PureIf:bool False))
  (define 74/PrimApp:uint256 (SUB 4 43/Declassify:uint256))
  (define 75/PrimApp:uint256 (ADD 51/Declassify:uint256 74/PrimApp:uint256))
  (define 76/PrimApp:uint256 (MOD 75/PrimApp:uint256 3))
  (define 77/PureIf:uint256 (IF_THEN_ELSE 72/PureIf:bool 0 1))
  (define 78/PureIf:uint256 (IF_THEN_ELSE 69/PureIf:bool 2 77/PureIf:uint256))
  (define 79/PureIf:uint256 (IF_THEN_ELSE 73/PureIf:bool 76/PrimApp:uint256 78/PureIf:uint256))
  (define 80/PrimApp:bool (PLE 0 79/PureIf:uint256))
  (define 81/PrimApp:bool (PLT 79/PureIf:uint256 5))
  (define 82/PureIf:bool (IF_THEN_ELSE 80/PrimApp:bool 81/PrimApp:bool False))
  (assert! 82/PureIf:bool)
  (define 83/PrimApp:bool (PEQ 79/PureIf:uint256 2))
  (define 84/PrimApp:bool (PLE 0 51/Declassify:uint256))
  (define 85/PrimApp:bool (PLT 51/Declassify:uint256 3))
  (define 86/PureIf:bool (IF_THEN_ELSE 84/PrimApp:bool 85/PrimApp:bool False))
  (define 87/PureIf:bool (IF_THEN_ELSE 83/PrimApp:bool False True))
  (define 88/PureIf:bool (IF_THEN_ELSE 87/PureIf:bool True 86/PureIf:bool))
  (assert! 88/PureIf:bool)
  (define 89/PrimApp:bool (PEQ 79/PureIf:uint256 0))
  (define 90/PrimApp:bool (PLE 0 43/Declassify:uint256))
  (define 91/PrimApp:bool (PLT 43/Declassify:uint256 3))
  (define 92/PureIf:bool (IF_THEN_ELSE 90/PrimApp:bool 91/PrimApp:bool False))
  (define 93/PureIf:bool (IF_THEN_ELSE 89/PrimApp:bool False True))
  (define 94/PureIf:bool (IF_THEN_ELSE 93/PureIf:bool True 92/PureIf:bool))
  (assert! 94/PureIf:bool)
  (define 95/PrimApp:bool (PEQ 79/PureIf:uint256 2))
  (define 96/PrimApp:bool (PEQ 51/Declassify:uint256 0))
  (define 97/PureIf:bool (IF_THEN_ELSE 96/PrimApp:bool 95/PrimApp:bool False))
  (possible? 97/PureIf:bool)
  (define 98/PrimApp:bool (PEQ 51/Declassify:uint256 1))
  (define 99/PureIf:bool (IF_THEN_ELSE 98/PrimApp:bool 95/PrimApp:bool False))
  (possible? 99/PureIf:bool)
  (define 100/PrimApp:bool (PEQ 51/Declassify:uint256 2))
  (define 101/PureIf:bool (IF_THEN_ELSE 100/PrimApp:bool 95/PrimApp:bool False))
  (possible? 101/PureIf:bool)
  (define 102/PrimApp:bool (PEQ 79/PureIf:uint256 0))
  (define 103/PrimApp:bool (PEQ 43/Declassify:uint256 0))
  (define 104/PureIf:bool (IF_THEN_ELSE 103/PrimApp:bool 102/PrimApp:bool False))
  (possible? 104/PureIf:bool)
  (define 105/PrimApp:bool (PEQ 43/Declassify:uint256 1))
  (define 106/PureIf:bool (IF_THEN_ELSE 105/PrimApp:bool 102/PrimApp:bool False))
  (possible? 106/PureIf:bool)
  (define 107/PrimApp:bool (PEQ 43/Declassify:uint256 2))
  (define 108/PureIf:bool (IF_THEN_ELSE 107/PrimApp:bool 102/PrimApp:bool False))
  (possible? 108/PureIf:bool)
  (define 109/PrimApp:bool (PEQ 79/PureIf:uint256 2))
  (define 110/PrimApp:uint256 (MUL 2 5/Declassify:uint256))
  (define 111/PrimApp:bool (PEQ 79/PureIf:uint256 0))
  (define 112/PrimApp:uint256 (MUL 2 5/Declassify:uint256))
  (define 113/PureIf:uint256 (IF_THEN_ELSE 111/PrimApp:bool 0 5/Declassify:uint256))
  (define 114/PureIf:uint256 (IF_THEN_ELSE 111/PrimApp:bool 112/PrimApp:uint256 5/Declassify:uint256))
  (define 115/PureIf:uint256 (IF_THEN_ELSE 109/PrimApp:bool 110/PrimApp:uint256 113/PureIf:uint256))
  (define 116/PureIf:uint256 (IF_THEN_ELSE 109/PrimApp:bool 0 114/PureIf:uint256))
  (define 117/PrimApp:uint256 (ADD 6/Declassify:uint256 115/PureIf:uint256))
  (transfer! 0/A:address 117/PrimApp:uint256)
  (transfer! 3/B:address 116/PureIf:uint256)
  (from-consensus (define 118/Interact:bool (interact.outcome bool ))
  (define 119/PrimApp:bool (PLE 0 79/PureIf:uint256))
  (define 120/PrimApp:bool (PLT 79/PureIf:uint256 5))
  (define 121/PureIf:bool (IF_THEN_ELSE 119/PrimApp:bool 120/PrimApp:bool False))
  (require! 121/PureIf:bool)
  (define 122/PrimApp:bool (PEQ 79/PureIf:uint256 0))
  (define 123/PrimApp:bool (PEQ 79/PureIf:uint256 1))
  (define 124/PrimApp:bool (PEQ 79/PureIf:uint256 2))
  (define 125/PrimApp:bool (PEQ 79/PureIf:uint256 3))
  (define 126/PureIf:bytes (IF_THEN_ELSE 125/PrimApp:bool "Alice quits" "Bob quits"))
  (define 127/PureIf:bytes (IF_THEN_ELSE 124/PrimApp:bool "Alice wins" 126/PureIf:bytes))
  (define 128/PureIf:bytes (IF_THEN_ELSE 123/PrimApp:bool "Draw" 127/PureIf:bytes))
  (define 129/PureIf:bytes (IF_THEN_ELSE 122/PrimApp:bool "Bob wins" 128/PureIf:bytes))
  129/PureIf:bytes))))))