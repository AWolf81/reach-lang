// <Dispatcher>
jump h1
// </Dispatcher>
// <Handlers>
// <Handler 11>
h11:
arg 0
int 11
!=
bnz revert
// XXX handler check sender
// XXX handler check timeout
arg 1
arg 2
arg 3
arg 4
arg 5
arg 6
arg 7
// XXX digest
pload 0
!=
bnz revert
arg 1
arg 2
arg 3
arg 4
arg 5
int 3
store 5
store 4
store 3
store 2
store 1
store 0
jump l5
// </Handler 11>
// <Handler 10>
h10:
arg 0
int 10
!=
bnz h11
// XXX handler check sender
// XXX handler check timeout
arg 1
arg 2
arg 3
arg 4
arg 5
arg 6
arg 7
// XXX digest
pload 0
!=
bnz revert
txn Amount
int 0
==
!
bnz revert
arg 6
arg 8
arg 9
// XXX digest
==
!
bnz revert
int 0
arg 9
<=
bnz h10_0
int 0
jump h10_1
h10_0:
arg 9
int 3
<
h10_1:
!
bnz revert
int 0
arg 9
<=
bnz h10_2
int 0
jump h10_3
h10_2:
arg 9
int 3
<
h10_3:
store 0
int 0
arg 7
<=
bnz h10_4
int 0
jump h10_5
h10_4:
arg 7
int 3
<
h10_5:
store 1
load 0
bnz h10_6
int 0
jump h10_7
h10_6:
load 1
h10_7:
bnz h10_8
load 0
bnz h10_9
load 1
bnz h10_10
int 1
jump h10_11
h10_10:
int 0
h10_11:
jump h10_12
h10_9:
int 2
h10_12:
jump h10_13
h10_8:
arg 9
int 4
arg 7
-
+
int 3
%
h10_13:
store 2
load 2
int 2
==
store 3
load 2
int 0
==
store 4
arg 1
arg 2
arg 3
arg 4
int 1
arg 5
+
load 2
store 5
store 4
store 3
store 2
store 1
store 0
jump l5
// </Handler 10>
// <Handler 9>
h9:
arg 0
int 9
!=
bnz h10
// XXX handler check sender
// XXX handler check timeout
arg 1
arg 2
arg 3
arg 4
arg 5
arg 6
// XXX digest
pload 0
!=
bnz revert
arg 1
arg 2
arg 3
arg 4
arg 5
int 4
store 5
store 4
store 3
store 2
store 1
store 0
jump l5
// </Handler 9>
// <Handler 8>
h8:
arg 0
int 8
!=
bnz h9
// XXX handler check sender
// XXX handler check timeout
arg 1
arg 2
arg 3
arg 4
arg 5
arg 6
// XXX digest
pload 0
!=
bnz revert
txn Amount
int 0
==
!
bnz revert
int 0
arg 7
<=
bnz h8_0
int 0
jump h8_1
h8_0:
arg 7
int 3
<
h8_1:
!
bnz revert
arg 1
arg 2
arg 3
arg 4
arg 5
arg 6
arg 7
// XXX digest
pstore 0
// </Handler 8>
// <Handler 7>
h7:
arg 0
int 7
!=
bnz h8
// XXX handler check sender
// XXX handler check timeout
arg 1
arg 2
arg 3
arg 4
arg 5
// XXX digest
pload 0
!=
bnz revert
arg 1
arg 2
arg 3
arg 4
arg 5
int 3
store 5
store 4
store 3
store 2
store 1
store 0
jump l5
// </Handler 7>
// <Handler 6>
h6:
arg 0
int 6
!=
bnz h7
// XXX handler check sender
// XXX handler check timeout
arg 1
arg 2
arg 3
arg 4
arg 5
// XXX digest
pload 0
!=
bnz revert
txn Amount
int 0
==
!
bnz revert
arg 1
arg 2
arg 3
arg 4
arg 5
arg 6
// XXX digest
pstore 0
// </Handler 6>
// <Handler 4>
h4:
arg 0
int 4
!=
bnz h6
// XXX handler check sender
// XXX handler check timeout
arg 1
arg 2
arg 3
// XXX digest
pload 0
!=
bnz revert
int 1
arg 1
// XXX transfer
jump halt
// </Handler 4>
// <Handler 3>
h3:
arg 0
int 3
!=
bnz h4
// XXX handler check sender
// XXX handler check timeout
arg 1
arg 2
arg 3
// XXX digest
pload 0
!=
bnz revert
txn Amount
arg 2
==
!
bnz revert
arg 1
// XXX unbound variable: (3,("B",BT_Address))
arg 2
arg 3
int 0
int 1
store 5
store 4
store 3
store 2
store 1
store 0
jump l5
// </Handler 3>
// <Handler 2>
h2:
arg 0
int 2
!=
bnz h3
// XXX handler check sender
// XXX handler check timeout
// XXX digest
pload 0
!=
bnz revert
jump halt
// </Handler 2>
// <Handler 1>
h1:
arg 0
int 1
!=
bnz h2
// XXX handler check sender
// XXX handler check timeout
// XXX digest
pload 0
!=
bnz revert
txn Amount
arg 1
arg 2
+
==
!
bnz revert
// XXX unbound variable: (0,("A",BT_Address))
arg 1
arg 2
// XXX digest
pstore 0
// </Handler 1>
// </Handlers>
// <Loops>
// <Loop 5>
l5:
load 5
int 1
==
bnz l5_0
int 1
jump l5_1
l5_0:
int 0
l5_1:
bnz l5_2
load 0
load 1
load 2
load 3
load 4
// XXX digest
pstore 0
l5_2:
load 5
int 3
==
bnz l5_3
load 5
int 4
==
bnz l5_4
load 5
int 2
==
store 6
load 3
load 6
bnz l5_5
int 0
jump l5_6
l5_5:
int 2
load 2
*
l5_6:
+
load 0
// XXX transfer
load 6
bnz l5_7
int 2
load 2
*
jump l5_8
l5_7:
int 0
l5_8:
load 1
// XXX transfer
jump halt
l5_4:
int 1
load 0
// XXX transfer
jump halt
l5_3:
int 1
load 1
// XXX transfer
jump halt
// </Loop 5>
// </Loops>
// <Standard>
revert:
int 0
halt
halt:
int 1
halt
// </Standard>