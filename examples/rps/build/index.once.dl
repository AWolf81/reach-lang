#lang dl
parts {
  "A" = interact {
    commits = T_Fun [] T_Null,
    endsWith = T_Fun [T_Bytes] T_Null,
    getHand = T_Fun [] T_Bytes,
    getParams = T_Fun [] (T_Tuple [T_UInt256,T_UInt256]),
    partnerIs = T_Fun [T_Address] T_Null,
    random = T_Fun [] T_UInt256,
    reveals = T_Fun [T_Bytes] T_Null},
  "B" = interact {
    acceptParams = T_Fun [T_UInt256,T_UInt256] T_Null,
    endsWith = T_Fun [T_Bytes] T_Null,
    getHand = T_Fun [] T_Bytes,
    partnerIs = T_Fun [T_Address] T_Null,
    random = T_Fun [] T_UInt256,
    shows = T_Fun [] T_Null},
  "O" = interact {
    }};

only("A") {
  prompt() {
    const v1 = interact("A")."getParams"();
    const v2 = v1[0];
    const v3 = v1[1]; }; };
only("A") {
  const v7 = ADD(v2,v3); };
publish("A", join(v6))(v2,v3)(v4, v5).pay(v7){
  const v8 = ADD(v4,v5);
  const v9 = TXN_VALUE();
  const v10 = PEQ(v8,v9);
  claim(CT_Require)(v10);
  commit();
  only("B") {
    prompt() {
      const v12 = interact("B")."partnerIs"(v6);
      const v13 = interact("B")."acceptParams"(v4,v5); }; };
  only("B") {
     };
  publish("B", join(v14))()().pay(v4).timeout(DLC_Int 10, {
    prompt() {
      only("A") {
         };
      publish("A", again(v6))()().pay(DLC_Int 0){
        const v19 = TXN_VALUE();
        const v20 = PEQ(DLC_Int 0,v19);
        claim(CT_Require)(v20);
        const v21 = BALANCE();
        transfer.(v21).to(v6);
        commit();
        prompt() {
          only("A") {
            prompt() {
              claim(CT_Require)(DLC_Bool True);
              const v27 = interact("A")."endsWith"(DLC_Bytes "Bob quits"); }; };
          only("B") {
            prompt() {
              claim(CT_Require)(DLC_Bool True);
              const v32 = interact("B")."endsWith"(DLC_Bytes "Bob quits"); }; }; };
        exit(); } }; }){
    const v15 = TXN_VALUE();
    const v16 = PEQ(v4,v15);
    claim(CT_Require)(v16);
    commit();
    only("A") {
      prompt() {
        const v34 = interact("A")."partnerIs"(v14);
        prompt(let v36) {
          const v37 = interact("A")."getHand"();
          const v38 = BYTES_EQ(v37,DLC_Bytes "ROCK");
          const v39 = BYTES_EQ(v37,DLC_Bytes "PAPER");
          const v40 = BYTES_EQ(v37,DLC_Bytes "SCISSORS");
          const v42 = IF_THEN_ELSE(v38,DLC_Bool True,v39);
          const v44 = IF_THEN_ELSE(v42,DLC_Bool True,v40);
          claim(CT_Assume)(v44);
          if v38 then {
            throw(0).to(36); }
          else {
            if v39 then {
              throw(1).to(36); }
            else {
              throw(2).to(36); }; }; };
        const v47 = PLE(DLC_Int 0,v36);
        const v48 = PLT(v36,DLC_Int 3);
        const v50 = IF_THEN_ELSE(v47,v48,DLC_Bool False);
        claim(CT_Assert)(v50);
        const v52 = interact("A")."random"();
        const v53 = digest(v52,v36);
        const v54 = interact("A")."commits"(); }; };
    only("A") {
       };
    publish("A", again(v6))(v53)(v55).pay(DLC_Int 0).timeout(DLC_Int 10, {
      prompt() {
        only("B") {
           };
        publish("B", again(v14))()().pay(DLC_Int 0){
          const v60 = TXN_VALUE();
          const v61 = PEQ(DLC_Int 0,v60);
          claim(CT_Require)(v61);
          const v62 = BALANCE();
          transfer.(v62).to(v14);
          commit();
          prompt() {
            only("A") {
              prompt() {
                claim(CT_Require)(DLC_Bool True);
                const v68 = interact("A")."endsWith"(DLC_Bytes "Alice quits"); }; };
            only("B") {
              prompt() {
                claim(CT_Require)(DLC_Bool True);
                const v73 = interact("B")."endsWith"(DLC_Bytes "Alice quits"); }; }; };
          exit(); } }; }){
      const v56 = TXN_VALUE();
      const v57 = PEQ(DLC_Int 0,v56);
      claim(CT_Require)(v57);
      commit();
      only("B") {
        prompt() {
          prompt(let v76) {
            const v77 = interact("B")."getHand"();
            const v78 = BYTES_EQ(v77,DLC_Bytes "ROCK");
            const v79 = BYTES_EQ(v77,DLC_Bytes "PAPER");
            const v80 = BYTES_EQ(v77,DLC_Bytes "SCISSORS");
            const v82 = IF_THEN_ELSE(v78,DLC_Bool True,v79);
            const v84 = IF_THEN_ELSE(v82,DLC_Bool True,v80);
            claim(CT_Assume)(v84);
            if v78 then {
              throw(0).to(76); }
            else {
              if v79 then {
                throw(1).to(76); }
              else {
                throw(2).to(76); }; }; };
          const v87 = PLE(DLC_Int 0,v76);
          const v88 = PLT(v76,DLC_Int 3);
          const v90 = IF_THEN_ELSE(v87,v88,DLC_Bool False);
          claim(CT_Assert)(v90);
          const v91 = interact("B")."shows"(); }; };
      only("B") {
         };
      publish("B", again(v14))(v76)(v92).pay(DLC_Int 0).timeout(DLC_Int 10, {
        prompt() {
          only("A") {
             };
          publish("A", again(v6))()().pay(DLC_Int 0){
            const v97 = TXN_VALUE();
            const v98 = PEQ(DLC_Int 0,v97);
            claim(CT_Require)(v98);
            const v99 = BALANCE();
            transfer.(v99).to(v6);
            commit();
            prompt() {
              only("A") {
                prompt() {
                  claim(CT_Require)(DLC_Bool True);
                  const v105 = interact("A")."endsWith"(DLC_Bytes "Bob quits"); }; };
              only("B") {
                prompt() {
                  claim(CT_Require)(DLC_Bool True);
                  const v110 = interact("B")."endsWith"(DLC_Bytes "Bob quits"); }; }; };
            exit(); } }; }){
        const v93 = TXN_VALUE();
        const v94 = PEQ(DLC_Int 0,v93);
        claim(CT_Require)(v94);
        const v112 = PLE(DLC_Int 0,v92);
        const v113 = PLT(v92,DLC_Int 3);
        const v115 = IF_THEN_ELSE(v112,v113,DLC_Bool False);
        claim(CT_Require)(v115);
        commit();
        only("A") {
          prompt() {
            prompt(let v117) {
              const v119 = PLE(DLC_Int 0,v92);
              const v120 = PLT(v92,DLC_Int 3);
              const v122 = IF_THEN_ELSE(v119,v120,DLC_Bool False);
              claim(CT_Require)(v122);
              const v123 = PEQ(v92,DLC_Int 0);
              if v123 then {
                throw("ROCK").to(117); }
              else {
                const v124 = PEQ(v92,DLC_Int 1);
                if v124 then {
                  throw("PAPER").to(117); }
                else {
                  throw("SCISSORS").to(117); }; }; };
            const v125 = interact("A")."reveals"(v117); }; };
        only("A") {
           };
        publish("A", again(v6))(v52,v36)(v126, v127).pay(DLC_Int 0).timeout(DLC_Int 10, {
          prompt() {
            only("B") {
               };
            publish("B", again(v14))()().pay(DLC_Int 0){
              const v132 = TXN_VALUE();
              const v133 = PEQ(DLC_Int 0,v132);
              claim(CT_Require)(v133);
              const v134 = BALANCE();
              transfer.(v134).to(v14);
              commit();
              prompt() {
                only("A") {
                  prompt() {
                    claim(CT_Require)(DLC_Bool True);
                    const v140 = interact("A")."endsWith"(DLC_Bytes "Alice quits"); }; };
                only("B") {
                  prompt() {
                    claim(CT_Require)(DLC_Bool True);
                    const v145 = interact("B")."endsWith"(DLC_Bytes "Alice quits"); }; }; };
              exit(); } }; }){
          const v128 = TXN_VALUE();
          const v129 = PEQ(DLC_Int 0,v128);
          claim(CT_Require)(v129);
          const v147 = digest(v126,v127);
          const v148 = PEQ(v55,v147);
          claim(CT_Require)(v148);
          const v150 = PLE(DLC_Int 0,v127);
          const v151 = PLT(v127,DLC_Int 3);
          const v153 = IF_THEN_ELSE(v150,v151,DLC_Bool False);
          claim(CT_Require)(v153);
          prompt(let v155) {
            const v157 = PLE(DLC_Int 0,v127);
            const v158 = PLT(v127,DLC_Int 3);
            const v160 = IF_THEN_ELSE(v157,v158,DLC_Bool False);
            const v162 = PLE(DLC_Int 0,v92);
            const v163 = PLT(v92,DLC_Int 3);
            const v165 = IF_THEN_ELSE(v162,v163,DLC_Bool False);
            const v167 = IF_THEN_ELSE(v160,v165,DLC_Bool False);
            if v167 then {
              const v168 = SUB(DLC_Int 4,v92);
              const v169 = ADD(v127,v168);
              const v170 = MOD(v169,DLC_Int 3);
              throw(v170).to(155); }
            else {
              if v160 then {
                throw(2).to(155); }
              else {
                if v165 then {
                  throw(0).to(155); }
                else {
                  throw(1).to(155); }; }; }; };
          const v173 = PLE(DLC_Int 0,v155);
          const v174 = PLT(v155,DLC_Int 5);
          const v176 = IF_THEN_ELSE(v173,v174,DLC_Bool False);
          claim(CT_Assert)(v176);
          const v177 = PEQ(v155,DLC_Int 2);
          const v179 = PLE(DLC_Int 0,v127);
          const v180 = PLT(v127,DLC_Int 3);
          const v182 = IF_THEN_ELSE(v179,v180,DLC_Bool False);
          const v185 = IF_THEN_ELSE(v177,DLC_Bool False,DLC_Bool True);
          const v187 = IF_THEN_ELSE(v185,DLC_Bool True,v182);
          claim(CT_Assert)(v187);
          const v188 = PEQ(v155,DLC_Int 0);
          const v190 = PLE(DLC_Int 0,v92);
          const v191 = PLT(v92,DLC_Int 3);
          const v193 = IF_THEN_ELSE(v190,v191,DLC_Bool False);
          const v196 = IF_THEN_ELSE(v188,DLC_Bool False,DLC_Bool True);
          const v198 = IF_THEN_ELSE(v196,DLC_Bool True,v193);
          claim(CT_Assert)(v198);
          prompt() {
            const v200 = PEQ(v155,DLC_Int 2);
            prompt() {
              const v203 = PEQ(v127,DLC_Int 0);
              const v205 = IF_THEN_ELSE(v203,v200,DLC_Bool False);
              claim(CT_Possible)(v205);
              const v207 = PEQ(v127,DLC_Int 1);
              const v209 = IF_THEN_ELSE(v207,v200,DLC_Bool False);
              claim(CT_Possible)(v209);
              const v211 = PEQ(v127,DLC_Int 2);
              const v213 = IF_THEN_ELSE(v211,v200,DLC_Bool False);
              claim(CT_Possible)(v213); };
            const v214 = PEQ(v155,DLC_Int 0);
            prompt() {
              const v217 = PEQ(v92,DLC_Int 0);
              const v219 = IF_THEN_ELSE(v217,v214,DLC_Bool False);
              claim(CT_Possible)(v219);
              const v221 = PEQ(v92,DLC_Int 1);
              const v223 = IF_THEN_ELSE(v221,v214,DLC_Bool False);
              claim(CT_Possible)(v223);
              const v225 = PEQ(v92,DLC_Int 2);
              const v227 = IF_THEN_ELSE(v225,v214,DLC_Bool False);
              claim(CT_Possible)(v227); }; };
          prompt(let v228) {
            const v229 = PEQ(v155,DLC_Int 2);
            if v229 then {
              const v230 = MUL(DLC_Int 2,v4);
              throw([v230, 0]).to(228); }
            else {
              const v231 = PEQ(v155,DLC_Int 0);
              if v231 then {
                const v232 = MUL(DLC_Int 2,v4);
                throw([0, v232]).to(228); }
              else {
                throw([v4, v4]).to(228); }; }; };
          const v233 = v228[0];
          const v234 = v228[1];
          const v235 = ADD(v5,v233);
          transfer.(v235).to(v6);
          transfer.(v234).to(v14);
          commit();
          prompt() {
            only("A") {
              prompt() {
                prompt(let v239) {
                  const v241 = PLE(DLC_Int 0,v155);
                  const v242 = PLT(v155,DLC_Int 5);
                  const v244 = IF_THEN_ELSE(v241,v242,DLC_Bool False);
                  claim(CT_Require)(v244);
                  const v245 = PEQ(v155,DLC_Int 0);
                  if v245 then {
                    throw("Bob wins").to(239); }
                  else {
                    const v246 = PEQ(v155,DLC_Int 1);
                    if v246 then {
                      throw("Draw").to(239); }
                    else {
                      const v247 = PEQ(v155,DLC_Int 2);
                      if v247 then {
                        throw("Alice wins").to(239); }
                      else {
                        const v248 = PEQ(v155,DLC_Int 3);
                        if v248 then {
                          throw("Alice quits").to(239); }
                        else {
                          throw("Bob quits").to(239); }; }; }; }; };
                const v249 = interact("A")."endsWith"(v239); }; };
            only("B") {
              prompt() {
                prompt(let v251) {
                  const v253 = PLE(DLC_Int 0,v155);
                  const v254 = PLT(v155,DLC_Int 5);
                  const v256 = IF_THEN_ELSE(v253,v254,DLC_Bool False);
                  claim(CT_Require)(v256);
                  const v257 = PEQ(v155,DLC_Int 0);
                  if v257 then {
                    throw("Bob wins").to(251); }
                  else {
                    const v258 = PEQ(v155,DLC_Int 1);
                    if v258 then {
                      throw("Draw").to(251); }
                    else {
                      const v259 = PEQ(v155,DLC_Int 2);
                      if v259 then {
                        throw("Alice wins").to(251); }
                      else {
                        const v260 = PEQ(v155,DLC_Int 3);
                        if v260 then {
                          throw("Alice quits").to(251); }
                        else {
                          throw("Bob quits").to(251); }; }; }; }; };
                const v261 = interact("B")."endsWith"(v251); }; }; }; } } } } }