
/**
 * ===================================================
 * Value function
 * ===================================================
 *
 * An invariant that implies a spot price
 * at each point st. no matter what exchanges are carried
 * out, the share of value of each token in the pool remains
 * constant:
 *
 *  V = Π t => balanceT ** WeightT
 *
 * weightT : fraction representing share of pool
 *           ( total weights add up to 1 )
 */

/**
 * ===================================================
 * Spot Price
 * ===================================================
 *
 * Each pair of tokens in a pool has a spot price. It is
 * defined solely in terms of the balance and weights of
 * each token in the pair. The spot price of any two tokens,
 * SpotPriceIO, or SPio, is the ratio of token balances,
 * normalized by their weights:
 *
 * let i = balanceI / weightI
 * let o = balanceO / weightO
 * in
 * SPio = i / o
 *
 * With constant weights, spot prices will only change
 * based on token balances.
 *
 */

/**
 * ===================================================
 * Effective Price
 * ===================================================
 *
 * SPio is the theoretical price for trades which incur
 * no slippage. The effective price for a trade depends
 * on the amount traded, which always causes a price
 * change. We can define EPio as:
 *
 *  EPio = amtIn / amtOut
 *
 * EP tends to SP, when trade amounts tend to 0
 *
 */

/**
 * ===================================================
 * Trading: Out-Given-In
 * ===================================================
 *
 * When a user sends tokens `i` to get tokens `o`,
 * all other token balances remain the same. Since
 * the value function after the trade should remain
 * the same as before, we can calculate the amtOut
 * from:
 *
 * Π (k /= i, o) =>
 *   let others = (balanceK ** weightK)
 *   let out    = (balanceOut - amtOut) ** weightOut
 *   let in     = (balanceIn + amtIn) ** weightIn
 *   let inv    = Π k => balanceK ** weightK
 *   in
 *   others * out * in = inv
 *
 * which simplifies to:
 *
 * let v = balanceIn / (balanceIn + amtIn)
 * let w = weightIn / weightOut
 * let u = v ** w
 * let t = 1 - u
 * in
 * amtOut = balanceOut * t
 *
 * This function performs a swap for a Trader.
 */

/**
 * ===================================================
 * Liquidity Deposit: All-Asset Deposit
 * ===================================================
 *
 * An "all-asset" deposit must have all the assets in the
 * right proportions. To receive pIssued pool tokens,
 * given an existing total supply of pSupply, one must
 * deposit dK tokens to the pool.
 *
 * let u = (pSupply + pIssued) / pSupply
 * let t = u - 1
 * in
 * dK = t * balanceK
 *
 * balanceK: balance of token k before deposit
 *
 * Solved for pIssued:
 *
 * let u = (dK / balanceK) + 1
 * let t = pSupply * u
 * in
 * pIssued = t - pSupply
 *
 */

/**
 * ===================================================
 * Liquidity Withdrawal: All-Asset Withdraw
 * ===================================================
 *
 * Provider redeems their pool tokens in return for a
 * proportional share of each asset in pool. To calc
 * the amount of each token to withdraw from the pool:
 *
 * let u = (pSupply - pRedeemed) / pSupply
 * let t = 1 - u
 * in
 * aK = t * balanceK
 *
 * balanceK: balance of token k before withdrawal
 */

/**
 * ===================================================
 * Liquidity Deposit: Single-Asset Deposit
 * ===================================================
 *
 * Providers may depsoit single asset to pool, if pool
 * contains that asset. Depositing a single asset A, is
 * equivalent to depositing all pool assets proportionally
 * and then selling more of asset A to get back all the
 * other tokens deposited. This way a provider would end up
 * spending only asset A, since the amounts of other tokens
 * deposited would be returned through the trades.
 *
 * let u = V' / V
 * let t = u - 1
 * in
 * pIssued = pSupply * t
 *
 * V' : value after deposit
 * V  : value before deposit
 *
 * which simplifies to:
 *
 * let v = amtT / balanceT
 * let w = 1 + v
 * let u = w ** weightT
 * let t = u - 1
 * in
 * pIssued  = pSupplied * t
 *
 * t : token used in single deposit
 *
 */

/**
 * ===================================================
 * Liquidity Withdrawal : Single-Asset Withdrawal
 * ===================================================
 *
 * let w = 1 - (pReedemed / pSupply)
 * let u = w ** (1 / weightT)
 * let t = 1 - u
 * in
 * amtT = balanceT * t
 *
 * balanceT: balance of token before withdrawal
 *
 */

/**
 * ===================================================
 * Trading: In-Given-Out
 * ===================================================
 *
 * It's also useful for traders to know how much to send of
 * tokenIn to get a desired amount of tokenOut. We can calc
 * that by the same formula above, but solving for amtOut:
 *
 * let v = balanceOut / (balanceOut / amtOut)
 * let w = weightOut / weightIn
 * let u = v ** w
 * let t = u - 1
 * in
 * amtIn = balanceIn * t
 *
 * This function just returns info to Trader.
 */

/**
 * ===================================================
 * Trading: In-Given-Price
 * ===================================================
 *
 * Traders who want to take advantage of arbitrage would like
 * to know how many tokenIn they will have to send to change
 * spot price of SPio to a desired SP'io. The formula to
 * calc it is:
 *
 * let v = SP'io / SPio
 * let w = weightOut / (weightOut + weightIn)
 * let u = v ** w
 * let t = u - 1
 * in
 * amtIn = balanceIn * t
 *
 * This function just returns info to Trader.
 */
